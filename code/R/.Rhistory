library(readr)
ALTAS_with_feedback <- read_csv("~/Google Drive/Jobs/ArgyleData/Argentina/Argentina/data/raw/ALTAS_with_feedback.csv")
View(ALTAS_with_feedback)
wanted = c('ID_Vendedor', 'Agente', 'Fraude',
'DESC_PTOVTA', 'Equipo', 'Plan', 'Mercado',
'Doc', 'CuentaDeDoc')
df_subset = ALTAS_with_feedback[wanted]
df_subset$Fraude %>% ifelse(.=='Fraude', TRUE, FALSE)
library(magrittr)
df_subset$Fraude %>% ifelse(.=='Fraude', TRUE, FALSE)
ifelse(df_subset$Fraude == 'Fraude', TRUE, FALSE)
install.packages('survival')
library('survival')
?survival
`survival-internal`
?`survival-internal`
??`survival-internal`
aml
data(aml)
data('aml')
aml
aml->aml
View(aml)
View(aml)
order(aml$time)
aml[order(aml$time)]
aml[order(aml$time),]
aml[order(aml$time),] -> aml
library('mgrittr')
library('magrittr')
aml %>% hist(time)
aml %>% hist(time, type='h')
with(aml, hist(time, type='h'))
class(aml)
class(aml$time)
hist(aml$time)
aml %>%hist(time)
aml.survfit = survfit(Surv(time, status == 1) ~ 1, data=aml)
aml.survfit
plot(aml.survfit, xlab = "Time (weeks)", ylab="Proportion surviving", conf.int=FALSE, main="Survival in AML")
aml.survfit = survfit(Surv(time, status == 1) ~ 1, data=aml)
summary(aml.survfit)
plot(aml.survfit, xlab = "Time", ylab="Proportion surviving")
surv.by.aml.rx = survfit(Surv(time, status == 1) ~ x, data = aml)
summary(surv.by.aml.rx)
# Plot KM
plot(surv.by.aml.rx, xlab = "Time", ylab="Survival",col=c("black", "red"), lty = 1:2, main="Kaplan-Meier Survival vs. Maintenance in AML")
# Add legend
legend(100, .6, c("Maintained", "Not maintained"), lty = 1:2, col=c("black", "red"))
surv.diff.aml= survdiff(Surv(time, status == 1) ~ x, data=aml)
surv.diff.aml
methods(aml.survfit)
showMethods(aml.survfit)
showMethods('aml.survfit')
aml.survfit
aml.coxfit = coxph(Surv(time, status == 1) ~ 1, data=aml)
aml.coxfit
aml.coxfit = coxph(Surv(time, status) ~ status, data=aml)
aml.coxfit = coxph(Surv(time, status == 1) ~ 1, data=aml)
# Chunk 1
options(continue="  ", width=60)
options(SweaveHooks=list(fig=function() par(mar=c(4.1, 4.1, .3, 1.1))))
pdf.options(pointsize=10) #text in graph about the same as regular text
options(contrasts=c("contr.treatment", "contr.poly")) #ensure default
require("survival")
# Chunk 2: inital
require(mstate, quietly = TRUE)
data(aidssi)  # AIDS data set
data(ebmt3)   # transplant data set
detach("package:mstate")  # the package is not needed for the remainder
# Chunk 3: aids1
adata <- aidssi
adata$event <- factor(adata$status, 0:2, c("censored", "AIDS", "SI"))
# KM curves that censor the other endpoint (a bad idea)
bad1 <- survfit(Surv(time, event=="AIDS") ~ 1, adata)
bad2 <- survfit(Surv(time, event=="SI") ~1, adata)
# The correct Aalen-Johansen curves
ajfit <- survfit(Surv(time, event) ~1, adata)
ajfit$transitions
plot(ajfit, xmax=13, col=1:2, lwd=2,
xlab="Years from HIV infection", ylab="Probability")
legend(8, .2, c("AIDS", "SI"), lty=1, lwd=2, col=1:2, bty='n')
# Chunk 4: fitT2
# re-create figure T2
plot(bad1, conf.int=FALSE, xmax=13,
xlab="Years from HIV infection", ylab="Probability")
lines(bad2, conf.int=FALSE, fun='event', xmax=13)
text(c(8,8), c(.8, .22), c("AIDS", "SI"))
# Chunk 5: figT3
# re-create figure T3
plot(bad1, conf.int=FALSE, xmax=13, col="lightgray",
xlab="Years from HIV infection", ylab="Probability")
lines(bad2, conf.int=FALSE, fun='event', xmax=13, col='lightgray')
text(c(8,8), c(.8, .22), c("AIDS", "SI"))
lines(ajfit[,2], conf.int=FALSE, lwd=2, xmax=13)
lines(ajfit[,1], conf.int=FALSE, lwd=2, ,xmax=13, fun=function(x) x)
# Chunk 6: figT4
# re-create figure T4
temp <- ajfit
temp$pstate <- t(apply(temp$pstate, 1, cumsum))  # apply() transposes
plot(temp, xmax=13, lwd=2, col=1, ylim=c(0,1),
xlab="Years from HIV infection", ylab="Probability")
text(c(11, 11, 11), c(.2, .55, .9), c("AIDS", "SI", "Event free"))
# Chunk 7: cfit
cfit1 <- coxph(Surv(time, event=="AIDS") ~ ccr5, adata)
cfit1
cfit2 <- coxph(Surv(time, event=="SI") ~ ccr5, adata)
cfit2
# Chunk 8: stack
temp <- subset(adata, select=c(time, ccr5))
temp1 <- data.frame(temp, status= 1*(adata$event=="AIDS"), cause="AIDS")
temp2 <- data.frame(temp, status= 1*(adata$event=="SI"),   cause="SI")
stack <- rbind(temp1, temp2)
cfit3 <- coxph(Surv(time, status) ~ ccr5 * strata(cause), data=stack)
cfit3
sum(coef(cfit3))
# Chunk 9: stack2
stack$ccr5.1 <- (stack$ccr5=="WM") * (stack$cause == "AIDS")
stack$ccr5.2 <- (stack$ccr5=="WM") * (stack$cause == "SI")
coxph(Surv(time, status) ~ ccr5.1 + ccr5.2 + strata(cause), stack)
# Chunk 10: cfit4
cfit4 <- coxph(Surv(time, status) ~ ccr5.1 + ccr5.2 + cause, stack)
cfit4
summary(cfit4)$coefficients
cfit4b <-  coxph(Surv(time, status) ~ ccr5*cause, stack) #same result
# Chunk 11: figT5
# re-create figure T5 in a single panel
tdata <- expand.grid(ccr5=c("WW","WM"), cause=c("AIDS", "SI"))
tdata
tsurv <- survfit(cfit4b, newdata=tdata)
smat <- matrix(list(), 3, 3,
dimnames=list(from= c("AIDS", "SI", "entry"),
to =  c("AIDS", "SI", "entry")))
smat[3,1] <- list(tsurv[1:2])
smat[3,2] <- list(tsurv[3:4])
smat   #did we put things in the right place?
csurv1 <- survfit(smat, p0=c(0,0,1))
plot(csurv1[,1:2], col=1:2, lty=c(1,1,2,2), xmax=13, lwd=2,
xlab="Years from HIV infection", ylab="Probability")
legend(0, .4, c("AIDS, WW", "AIDS, WM", "SI, WW", "SI, WM"),
col=1:2, lty=c(1,1,2,2), lwd=2, bty='n')
# Chunk 12
fdata1 <- finegray(Surv(time, event) ~ ., adata, etype='AIDS')
fgfit1 <- coxph(Surv(fgstart, fgstop, fgstatus) ~ ccr5, fdata1,
weight = fgwt)
fgfit1
fdata2 <- finegray(Surv(time, event) ~., adata, etype="SI")
fgfit2 <- coxph(Surv(fgstart, fgstop, fgstatus) ~ ccr5, fdata2,
weight = fgwt)
fgfit2
# Chunk 13: figT8
# re-create figure T8: Fine-Gray curves
fgsurv1<-survfit(fgfit1,newdata=tdata)
fgsurv2<-survfit(fgfit2,newdata=tdata)
oldpar <- par(mfrow=c(1,2), mar=c(4.1, 3.1, 3.1, 1)) #leave room for title
plot(fgsurv1, col=1:2, lty=c(1,1,2,2), lwd=2, xmax=13,
ylim=c(0, .5),fun='event',
xlab="Years from HIV infection", ylab="Probability")
title("AIDS")
plot(fgsurv2, col=1:2, lty=c(1,1,2,2), lwd=2, xmax=13,
ylim=c(0, .5), fun='event',
xlab="Years from HIV infection", ylab="Probability")
title("SI appearance")
par(oldpar)
# Chunk 14: figT9
# re-create figure T9: curves by CCR type
aj2 <- survfit(Surv(time, event) ~ ccr5, adata)
oldpar <- par(mfrow=c(1,2))
plot(aj2[,1], xmax=13, col=1:2, lwd=2, ylim=c(0, .5),
xlab="Years from HIV infection", ylab="Probability of AIDS")
text(c(10, 10), c(.35, .07), c("WW", "WM"))
plot(aj2[,2], xmax=13, col=1:2, lwd=2, ylim=c(0, .5),
xlab="Years from HIV infection", ylab="Probability of SI")
text(c(8, 8), c(.34, .18), c("WW", "WM"))
par(oldpar)
# Chunk 15: tableT2
table(ebmt3$dissub)
table(ebmt3$drmatch)
table(ebmt3$tcd)
table(ebmt3$age)
# Chunk 16: data1
temp <- subset(ebmt3, select = -c(prtime, prstat, rfstime, rfsstat))
edata <- tmerge(temp, ebmt3, id,
rstat = event(rfstime, rfsstat),
pstat = event(prtime, prstat),
enum  = tdc(prtime))
print(edata[15:20,-(3:5)])
# Check that no one has recovery and death on the same day
with(edata, table(rstat, pstat))
# Create the factor outcome
edata$event <- with(edata, factor(pstat + 2*rstat, 0:2,
labels = c("censor", "PR", "RelDeath")))
levels(edata$drmatch) <- c("Match", "Mismatch")
surv1 <- survfit(Surv(tstart, tstop, event) ~ 1, edata, id=id)
surv1$transitions   # matches the Frequencies on page C5
plot(surv1, col=1:2, xscale=365.25, lwd=2,
xlab="Years since transplant", ylab="Fraction in state")
legend(1000, .2, c("Platelet recovery", "Death or Relapse"),
lty=1, col=1:2, lwd=2, bty='n')
# Chunk 17: data2
temp1 <- with(edata, data.frame(edata[enum==0,], status=pstat[enum==0],
trans="1->2", from=1, to=2))  # baseline to PR
temp2 <- with(edata, data.frame(edata[enum==0,], status=rstat[enum==0],
trans="1->3", from=1, to=3)) # baseline to relapse/death
temp3 <- with(edata, data.frame(edata[enum==1,], status=rstat[enum==1],
trans="2->3", from=2, to=3)) # PR to replase/death
edata2 <- rbind(temp1, temp2, temp3)  # the stacked data set
# Chunk 18: efit1
efit1.2 <- coxph(Surv(tstop, event=='PR') ~
dissub + age + drmatch + tcd, ties='breslow',
data=edata, subset = (enum==0))
efit1.3 <- coxph(Surv(tstop, event=='RelDeath') ~
dissub + age + drmatch + tcd, ties= 'breslow',
data=edata, subset = (enum==0))
efit2.3 <- coxph(Surv(tstart, tstop, event=='RelDeath') ~
dissub + age + drmatch + tcd, ties='breslow',
data=edata, subset = (enum==1))
round(cbind('1->2'= coef(efit1.2) , '1->3'= coef(efit1.3),
'2->3' =coef(efit2.3)), 3)
# Chunk 19
efit1b <- coxph(Surv(tstart, tstop, status) ~ (dissub + age + drmatch + tcd)
*strata(trans), data=edata2, ties="breslow")
efit1c <- coxph(Surv(tstart, tstop, status) ~
strata(trans)/(dissub + age + drmatch + tcd),
data=edata2, ties="breslow")
# Rearrange the order so as to match the paper
mycoef <- summary(efit1c)$coefficients[, c(1,3)]  # coef and se
index <- as.vector(matrix(1:18, ncol=3, byrow=T))
round(mycoef[index,], 3)
# Compare the log-likelihoods of the fits
matrix(c(efit1.2$loglik + efit1.3$loglik + efit2.3$loglik,
efit1b$loglik, efit1c$loglik), nrow=2,
dimnames=list(c("Initial LL", "Final LL"),
c("fit a", "fit b", "fit c")))
# Chunk 20: efit2
efit2a <- coxph(Surv(tstart, tstop, status) ~
factor(from)*(dissub + age + drmatch + tcd),
data=edata2, ties="breslow", subset= (to==3))
efit2b <- coxph(Surv(tstart, tstop, status) ~
factor(from)/(dissub + age + drmatch + tcd),
data=edata2, ties="breslow", subset= (to==3))
mycoef <- summary(efit2a)$coefficients[, c(1,3)]
round(mycoef, 3)[c(2,4,6,8,10,12, 3,5,7,9,11,13,1),]
efit2c <- coxph(Surv(tstart, tstop, status) ~ strata(to) +
trans/(dissub + age + drmatch + tcd),
data=edata2, ties="breslow")
round(summary(efit2b)$coefficients[, c(1,3)], 3)
# Chunk 21: zph
z2 <- cox.zph(efit2a, transform=function(x) sqrt(x))
plot(z2[7], resid=FALSE)
abline(h=coef(efit2a)[7], col=2)
z2[7]
# Chunk 22: tableS4
# The extra variable for column 3 of table 3
efit3 <- coxph(Surv(tstart, tstop, status) ~ I(tstart/365.25) +
factor(from)/(dissub + age + drmatch + tcd),
data=edata2, ties="breslow", subset= (to==3))
coef(efit3)["I(tstart/365.25)"]
# Chunk 23: tableT4
efit4 <- coxph(Surv(tstop - tstart, status) ~
strata(trans)/(dissub + age + drmatch + tcd),
data=edata2, ties="breslow")
mycoef4 <- summary(efit4)$coefficients[, c(1,3)]  # coef and se
index4 <- index[7:18]  # leave off transition 1->2
round(mycoef4[index4,], 3)
# Chunk 24
newdata1 <- expand.grid(age="<=20", dissub="AML", drmatch="Mismatch",
tcd=c("No TCD", "TCD"))
newdata2 <- cbind(newdata1[c(1,2,1,2),], from=c(1,1,2,2))
newdata2
tcurve1 <- survfit(efit1.2, newdata1, se.fit=FALSE)
tcurve2 <- survfit(efit2a,  newdata2, se.fit=FALSE)
tmat <- matrix(list(), 3, 3,
dimnames=list(from=c("Tx", "PR", "R/D"),
to  =c("Tx", "PR", "R/D")))
tmat[1,2] <- list(tcurve1)
tmat[1,3] <- list(tcurve2[1:2] )
tmat[2,3] <- list(tcurve2[3:4] )
ecurve <- survfit(tmat, p0=c(1,0,0))
plot(ecurve, col=c(1,1,2,2,3,3), lty=1:2, lwd=2, xscale=365.25,
xlab="Years since transplant", ylab="Predicted probabilities")
legend(700, .9, c("Currently alive in remission, no PR", "Currently in PR",
"Relapse or death"), col=1:3, lwd=2, bty='n')
text(700, .95, "Solid= No TCD, dashed = TCD", adj=0)
# Chunk 25: fourstate
dtemp <- c("PR", "R/D after PR", "R/D without PR", "Tx")
xmat <- matrix(list(), 4, 4, dimnames=list(from=dtemp, to=dtemp))
xmat[4,1] <- list(tcurve1)
xmat[4,3] <- list(tcurve2[1:2] )
xmat[1,2] <- list(tcurve2[3:4] )
ecurve2 <- survfit(xmat, p0=c(0,0,0,1))
dim(ecurve2)   # rows are the two "subjects", cols are the states
plot(ecurve2[, 1:3], lwd=2, lty=1:2, col=c(2,2,3,3,4,4,1,1),
xscale=365.25,
xlab="Years since transplant", ylab="Predicted probabilities")
text(c(1500, 1500, 1500), c(.55, .3, .05),
c("PR", "R/D after PR", "R/D w/o PR"), col=2:4)
text(1550, .66, "solid= no SCD, dashed = SCD", col='gray')
# Chunk 26: figT14
tcurve <- ecurve2
tcurve$pstate <- t(apply(tcurve$pstate, 1, cumsum))
oldpar <- par(mfrow=c(1,2), mar=c(4.1, 3.1, 3.1, .1))
plot(tcurve[1,1:4], col=1, xscale=365.25, ylim=c(0,1),
xlab="Years since transplant", ylab="Predicted probabilities")
text(rep(4*365, 4), c(.4, .55, .7, .95), cex=.7,
c("Alive in remission, PR", "Relapse or death after PR",
"Relapse or death without PR", "Alive in remission, no PR"))
title("No TCD")
plot(tcurve[2,1:4], col=1, xscale=365.25, ylim=c(0,1),
xlab="Years since transplant", ylab="Predicted probabilities")
text(rep(4*365, 4), c(.45, .7, .82, .95), cex=.7,
c("Alive in remission, PR", "Relapse or death after PR",
"Relapse or death without PR", "Alive in remission, no PR"))
title("TCD")
par(oldpar)
rm(list = ls())
aml.coxfit = coxph(Surv(time, status == 1) ~ 1, data=aml)
aml -> aml
Summary(aml.coxfit)
aml.coxfit
predict(aml.coxfit, newdata = aml)
lung
lung -> lung
View(lung)
View(lung)
options(na.action=na.exclude) # retain NA in predictions
fit <- coxph(Surv(time, status) ~ age + ph.ecog + strata(inst), lung)
fit
mresid <- (lung$status-1) - predict(fit, type='expected') #Martingale resid
mresid
hist(mresid)
qqplot(mresid)
predict(fit,type="lp")
predict(fit,type="expected")
predict(fit,type="risk",se.fit=TRUE)
predict(fit,type="terms",se.fit=TRUE)
predict(fit,type="expected")
rm(list = ls())
install.packages("rpart")
library(rpart)
head(stagec)
head(stagec,10)
fit <- rpart(Surv(pgtime, pgstat) ~ age + eet + g2 + grade + gleason + ploidy, data=stagec)
plot(fit, uniform=T, branch=.4, compress=T)
text(fit, use.n=T)
print(fit)
stagec -> stagec
View(stagec)
View(stagec)
fit <-  coxph(Surv(start, end, event)~ tx+size+num, data=bladder)
fit <-  coxph(Surv(start, end, event)~ tx+size+num, data=bladder1)
fit <-  coxph(Surv(start, end, event)~ tx+size+num, data=bladder2)
fit <-  coxph(Surv(start, end, event)~tx+size+num, data=bladder)
bladder -> bladder
View(bladder)
View(bladder)
bladder1 -> bladder
#sample time
dT <- 1
#observation times
t <- seq(1, 75, dT)
#process noise (standard deviation)
Wk <- sqrt(10)
#measurement noise (standard deviation)
Vk <- sqrt(1)
#state at t=0
X0 <- 0 + rnorm(1)*sqrt(5)
#simulate true state for x at the observation times
Xk <- matrix(NA, nrow=length(t)+1, ncol=1)
Yk <- matrix(NA, nrow=length(t), ncol=1)
Xk[1] <- X0
for (i in 2:(length(t)+1)) {
Xk[i] <- Xk[i-1]/2 + (25*Xk[i-1])/(1+Xk[i-1]^2) + 8*cos(1.2*(i-1)) + rnorm(1)*Wk
Yk[i-1] <- (Xk[i]^2)/20 + rnorm(1)*Vk}
#plot simulated states
plot(c(0,t), Xk, type="o", xlab="Time, k", ylab="x(k)")
#plot measurements
plot(t, Yk, type="o", xlab="Time, k", ylab="y(k)")
#store measurement data
dataEx1 <- Yk
#Dynamic model:
#specifying 1 state, namely [x].
#Note that you may change the initial state estimate (at t=0) below for x
#and see how it influences the behavior of the particle filter.
ex1 <- list(m0=0, #initial state estimate
#error covariance of the initial state estimate:
#this vector reflects the uncertainty in our initial state estimate
#you may change the value in this vector and see how it influences
#the behavior of the particle filter
C0=5,
#measurement noise
V=Vk^2,
#process noise
W=Wk^2)
ex1
Specify the state transition function:
#WARNING: always use arguments x and k when specifying the GGfunction
GGfunction <- function (x, k){
x/2 + (25*x)/(1+x^2) + 8*cos(1.2*(k))}
#Specify the observation/measurement function:
#WARNING: always use arguments x and k when specifying the FFfunction
FFfunction <- function (x, k){
(x^2)/20}
#Specify the state transition function:
#WARNING: always use arguments x and k when specifying the GGfunction
GGfunction <- function (x, k){
x/2 + (25*x)/(1+x^2) + 8*cos(1.2*(k))}
#Specify the observation/measurement function:
#WARNING: always use arguments x and k when specifying the FFfunction
FFfunction <- function (x, k){
(x^2)/20}
##Compute the filtered (a posteriori) state estimates with the PF
pf1 <- PF(y=dataEx1, mod=ex1, N=500, resampling="strat",
GGfunction=GGfunction, FFfunction=FFfunction)
setwd('/Users/avivb/Google Drive/Research/StanfordPostdoc/mehcoeg/code/R')
