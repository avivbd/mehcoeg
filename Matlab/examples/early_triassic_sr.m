function early_triassic_sr()
%% Early Triassic lobal biogeochemical cycle model for Sr
%   
% TODO Remove outliers

clc
clear
close all
%%
d = get_data();
p = model_params(d);

t = d.Age;
z_true = d.RSr;

[sim_t, sim_Y] = simulate_system(t, p.x0, p);
z_sim = sim_Y(:, 1) + p.v';

% 
subplot 211
hold on
plot(t, z_sim ,'ro')
% plot(sim_t, sim_Y(:, 1) ,'-')
plot(t, z_true ,'sk')
hold on 
legend('simulated', 'real')
ylabel('Sr^{87}/Sr^{86}')
xlabel('t (Ma)')
grid on

subplot 212
hold on
plot(sim_t, sim_Y(:, 2) ,'o')
xlabel('t (Ma)')
ylabel('F^{Sr}_{Riv} (10^{18} mol/Myr)')
grid on

% subplot 313
% hold on
% plot(p.t_interp, p.forcing ,'o')


%%

[X0, Xs, X_hats, Ds] = ...
ENKS(@(t, x) odefun(t, x, p), p.H, ...
     p.t, z_sim, p.x0, p.P0, p.R, p.Q, ...
     'state_eqn_type', 'cont-time', ...
     'ensemble_size', p.ensemble_size, ...
     'implementation', 'pert-obs', ...
     'cov_or_sd', 'sd', ...
     'theta', 1);

 z_marker = 'o';

plot_enkf(p.t, z_sim, X0, Xs, X_hats, ...
          Ds, p.state_names, p.H, z_marker)


%%      
[X0, Xs, X_hats, Ds] = ...
ENKS(@(t, x) odefun(t, x, p), p.H, ...
     p.t, z_true, p.x0, p.P0, p.R, p.Q, ...
     'state_eqn_type', 'cont-time', ...
     'ensemble_size', p.ensemble_size, ...
     'implementation', 'pert-obs', ...
     'cov_or_sd', 'sd', ...
     'theta', 1);
z_marker = 'sk';

plot_enkf(p.t, z_true, X0, Xs, X_hats, ...
          Ds, p.state_names, p.H, z_marker)
      
      
% reverse pass
% t_r  = fliplr(p.t);
% z_r = fliplr(z);

% [X0, Xs, X_hats, Ds] = ...
% ENKF(@(t, x) odefun(t, x, p), p.H, ...
%      t_r, z_r, p.x0, p.P0, p.R, p.Q, ...
%      'state_eqn_type', 'cont-time', ...
%      'ensemble_size', p.ensemble_size, ...
%      'implementation', 'pert-obs', ...
%      'cov_or_sd', 'sd', ...
%      'solver', 'myode',...
%      'theta', 1);
% 
%  
% plot_enkf(t_r, z_r, X0, Xs, X_hats, Ds, p.state_names, p.H)


end

function  p = model_params(d)
%% get system parameters
p = struct();
p.t = d.Age';
p.dt = p.t(2) - p.t(1);
p.t_interp = p.t(1):p.dt:p.t(end);

p.state_names = {'Sr^{87}/Sr^{86}', 'F^{Sr}_{Riv} (10^{18} mol/Myr)'};

%numbers from Arthur and Kump 1997
p.F_Sr_hydro = 0.35e-2; %0.35e10 mol/y = 0.35e16 mol/Myr = 0.35e-2 (1e18 mol)/My 
p.R_Sr_hydro = 0.7035;
p.MSr = 1.25e-1; % 1.25e17 mol= 1.25e-1 (1e18 mol)

%either set riverine input to the modern and calibrate ocean accordingly
% p.F_Sr_riv = 2.2e-2; %2.2e-2; % 2.2e10 mol = 2.2e16 mol/Myr = 2.2e-2 (1e18 mol)/My
% p.RSr = (p.F_Sr_hydro*p.R_Sr_hydro + p.F_Sr_riv*p.R_Sr_riv)/(p.F_Sr_hydro + p.F_Sr_riv);

%or set the ocean and adjust the riverine flux to maintain balance.
% p.RSr(p.F_Sr_hydro + p.F_Sr_riv) = (p.F_Sr_hydro*p.R_Sr_hydro + p.F_Sr_riv*p.R_Sr_riv)
% p.RSr*p.F_Sr_hydro + p.RSr*p.F_Sr_riv = p.F_Sr_hydro*p.R_Sr_hydro + p.F_Sr_riv*p.R_Sr_riv
% p.RSr*p.F_Sr_hydro - p.F_Sr_hydro*p.R_Sr_hydro = p.F_Sr_riv*p.R_Sr_riv - p.RSr*p.F_Sr_riv
% p.F_Sr_riv = p.F_Sr_hydro(p.RSr - p.R_Sr_hydro)/(R_Sr_riv - p.RSr)
p.RSr = 0.7071;
p.R_Sr_riv = 0.7101;
p.F_Sr_riv = p.F_Sr_hydro*(p.RSr - p.R_Sr_hydro)/(p.R_Sr_riv - p.RSr);

% affirm mass balance
assert(p.R_Sr_riv*p.F_Sr_riv + p.R_Sr_hydro*p.F_Sr_hydro == p.RSr*(p.F_Sr_riv + p.F_Sr_hydro))

p.mean_diff_Sr = mean(abs(diff(d.RSr)./diff(d.Age)));

p.x0 = [p.RSr;  p.F_Sr_riv];
p.H = [1 0];
p.nx = length(p.x0);

p.Q = diag([1e-4, 1e-3]);

p.R = 1e-6;

p.P0 = diag(p.x0*5e-3);

p.ensemble_size = 100;


tt = (p.t_interp - min(p.t_interp))/(max(p.t_interp) - min(p.t_interp));
k = 32;
p.forcing = 0.9*p.F_Sr_riv*[5*ones(1, length(tt(1:k))), -7.25*ones(1, length(tt(k:2*k-1))), zeros(1,length(tt(2*k-1:end-2)))];
p.v = 0.04*p.F_Sr_riv*randn(1, length(p.t));

% plot(tt, p.forcing)
% p.forcing = 0*ones(size(p.t_interp));
% p.forcing = 0;

end

function dx = odefun(t, x, p)
%%


RSr = x(1, :);
F_Sr_riv = x(2, :);

if all(p.forcing == 0)
    forcing = zeros(size(x(2, :)));
else
    forcing = interp1(p.t_interp, p.forcing, t, 'pchip');
end


dRSr = (p.F_Sr_hydro*(p.R_Sr_hydro - RSr) + ...
        F_Sr_riv.*(p.R_Sr_riv - RSr) ...
       )/p.MSr;

dF_Sr_riv = forcing*ones(1, size(F_Sr_riv, 2));

dx = [dRSr ; dF_Sr_riv];

end

function [T, Y] = simulate_system(t, x0, p)

[T, Y] = ode_solver(@(t, x) odefun(t, x, p), t, x0);

% [T, Y] = ode15s(@(t, x) odefun(t, x, p), t, x0);
% T = T';
% Y = Y';


end

function d = get_data()
d = [-253.120000000000,0.707300000000000;-253.080000000000,0.706960000000000;-253.040000000000,0.707080000000000;-252.990000000000,0.707120000000000;-252.930000000000,0.707040000000000;-252.920000000000,0.707280000000000;-252.900000000000,0.707300000000000;-252.850000000000,0.707070000000000;-252.830000000000,0.707380000000000;-252.790000000000,0.707040000000000;-252.740000000000,0.707040000000000;-252.720000000000,0.707140000000000;-252.720000000000,0.707210000000000;-252.720000000000,0.707260000000000;-252.700000000000,0.707180000000000;-252.700000000000,0.707490000000000;-252.690000000000,0.707080000000000;-252.680000000000,0.707120000000000;-252.680000000000,0.707160000000000;-252.660000000000,0.707520000000000;-252.620000000000,0.707430000000000;-252.600000000000,0.707300000000000;-252.580000000000,0.707330000000000;-252.570000000000,0.707150000000000;-252.560000000000,0.707250000000000;-252.550000000000,0.707280000000000;-252.540000000000,0.707160000000000;-252.520000000000,0.707080000000000;-252.510000000000,0.707210000000000;-252.480000000000,0.707060000000000;-252.360000000000,0.707130000000000;-252.340000000000,0.707330000000000;-252.330000000000,0.707400000000000;-252.310000000000,0.707280000000000;-252.290000000000,0.707230000000000;-252.260000000000,0.707290000000000;-252.260000000000,0.707310000000000;-252.230000000000,0.707230000000000;-252.230000000000,0.707360000000000;-252.220000000000,0.707380000000000;-252.180000000000,0.707320000000000;-252.140000000000,0.707200000000000;-252.060000000000,0.707370000000000;-252,0.707290000000000;-251.990000000000,0.707460000000000;-251.950000000000,0.707760000000000;-251.940000000000,0.707870000000000;-251.890000000000,0.707420000000000;-251.840000000000,0.707300000000000;-251.830000000000,0.707540000000000;-251.820000000000,0.708030000000000;-251.770000000000,0.707490000000000;-251.690000000000,0.707480000000000;-251.620000000000,0.707640000000000;-251.560000000000,0.707440000000000;-251.550000000000,0.707680000000000;-251.550000000000,0.707820000000000;-251.520000000000,0.707560000000000;-251.520000000000,0.707570000000000;-251.300000000000,0.707730000000000;-251.240000000000,0.707860000000000;-251.230000000000,0.707640000000000;-251.190000000000,0.707720000000000;-251.150000000000,0.707750000000000;-251.110000000000,0.707600000000000;-251.090000000000,0.707650000000000;-251.070000000000,0.707750000000000;-251.040000000000,0.707770000000000;-250.960000000000,0.707820000000000;-250.920000000000,0.707670000000000;-250.890000000000,0.707890000000000;-250.860000000000,0.708180000000000;-250.500000000000,0.707820000000000;-249.910000000000,0.707120000000000;-249.380000000000,0.708120000000000;-249.100000000000,0.708240000000000;-248.760000000000,0.708080000000000;-248.590000000000,0.708100000000000;-248.420000000000,0.708140000000000;-248.350000000000,0.708190000000000;-248.320000000000,0.708380000000000;-248.110000000000,0.708100000000000;-247.780000000000,0.708070000000000;-247.780000000000,0.708210000000000;-247.660000000000,0.708080000000000;-247.470000000000,0.708380000000000;-247.430000000000,0.708350000000000;-247.280000000000,0.708360000000000;-247.140000000000,0.708090000000000;-247.140000000000,0.707920000000000;-247.100000000000,0.707960000000000;-246.940000000000,0.708040000000000;-246.860000000000,0.708190000000000;-246.790000000000,0.708250000000000;-246.590000000000,0.708210000000000;-246.490000000000,0.707060000000000;-246.110000000000,0.708100000000000;-245.730000000000,0.707810000000000;-245.710000000000,0.708270000000000;-245.710000000000,0.707680000000000;-245.430000000000,0.707620000000000;-245.410000000000,0.707660000000000;-245.280000000000,0.707640000000000;-245.170000000000,0.707680000000000;-245.090000000000,0.707670000000000;-244.980000000000,0.707680000000000;-243.610000000000,0.707750000000000;-243.500000000000,0.707770000000000;-243.330000000000,0.708330000000000;-243.220000000000,0.707740000000000;-243.140000000000,0.707710000000000;-242.950000000000,0.707800000000000;-242.460000000000,0.707720000000000;-242.350000000000,0.707920000000000;-242.140000000000,0.707740000000000;-241.810000000000,0.707720000000000;-241.800000000000,0.707680000000000;-241.490000000000,0.707670000000000;-238.700000000000,0.707660000000000;-237.700000000000,0.707660000000000;-237.080000000000,0.707730000000000];
exclude_points = [51 72 74 81 96 99 109 114];
d(exclude_points, :) = [];
[UA,~,idx] = unique(d(:,1));
NEW_A = [UA,accumarray(idx,d(:,2),[],@mean)];
d = array2table(NEW_A, 'VariableNames', {'Age' 'RSr'});
end










